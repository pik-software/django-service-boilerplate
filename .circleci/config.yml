# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: quay.io/pik-software/base:v1.6

      - image: mdillon/postgis:9.6
        environment:
          POSTGRES_DB: repo
          POSTGRES_USER: root

      - image: redis:3.2

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - type: cache-restore
        key: pik-python-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt" }}

      - run:
          name: install dependencies
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade setuptools
            pip install --exists-action w -r requirements.txt --progress-bar off
            pip check

      - type: cache-save
        key: pik-python-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt" }}
        paths:
          - "~/.cache/pip"

      - run:
          name: run tests
          command: |
            echo -e "SECRET_KEY = 'not so sectret!'\n" > ./_project_/settings_local.py
            . .venv/bin/activate
            sleep 1
            python manage.py makemigrations explorer
            python manage.py makemigrations --check
            python manage.py migrate
            python manage.py collectstatic
            python manage.py check
            pytest --cov .
            prospector --profile-path . --profile .prospector.yaml .

  deploy-staging:
    docker:
      - image: quay.io/pik-software/base:v1.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: deploy staging
          command: |
            DOMAIN=pik-software.ru
            REPO_NAME=$( git config --local remote.origin.url | sed -n 's#.*/\([^.]*\)\.git#\1#p' )
            BRANCH_NAME=$( git branch | grep -e "^*" | cut -d' ' -f 2 )
            SSH_HOST="${BRANCH_NAME}.${REPO_NAME}.${DOMAIN}"
            SSH_PORT="22501"
            SSH_USER="circleci-staging"
            KNOWN_HOST_KEYS="ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNJvPW0n0F2IjYLCBLaBNyLnO8TLAWL5WI5pAek6EJGN7MZtT1aVw1+B/juOusAshqKoTzTAR3I/q4ns7jMK7gc="
            if [[ "${BRANCH_NAME}" == "deploy" || "${BRANCH_NAME}" == "master" ]]; then
              echo "${SSH_HOST} ${KNOWN_HOST_KEYS}" >> ~/.ssh/known_hosts
              echo -e "\nHost ${SSH_HOST}\n  HostName ${SSH_HOST}\n  Port ${SSH_PORT}\n  User ${SSH_USER}" >> ~/.ssh/config
              ./.circleci/deploy-dokku-back.sh "${SSH_HOST}" "${DOMAIN}" "${REPO_NAME}" "${BRANCH_NAME}" "staging"
            fi

  deploy-prod:
    docker:
      - image: quay.io/pik-software/base:v1.6
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: deploy master
          command: |
            DOMAIN=pik-software.ru
            SSH_HOST="boilerplate.pik-software.ru"
            SSH_PORT="22500"
            SSH_USER="circleci-staging"
            KNOWN_HOST_KEYS="ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNJvPW0n0F2IjYLCBLaBNyLnO8TLAWL5WI5pAek6EJGN7MZtT1aVw1+B/juOusAshqKoTzTAR3I/q4ns7jMK7gc="
            REPO_NAME=$( git config --local remote.origin.url | sed -n 's#.*/\([^.]*\)\.git#\1#p' )
            echo "${SSH_HOST} ${KNOWN_HOST_KEYS}" >> ~/.ssh/known_hosts
            echo -e "\nHost ${SSH_HOST}\n  HostName ${SSH_HOST}\n  Port ${SSH_PORT}\n  User ${SSH_USER}" >> ~/.ssh/config
            ./.circleci/deploy-dokku-back.sh "${SSH_HOST}" "${DOMAIN}" "${REPO_NAME}" "master" "production"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
      - staging-ok:
          type: approval
          requires:
            - deploy-staging
          filters:
            branches:
              only: master
      - deploy-prod:
          requires:
            - staging-ok
          filters:
            branches:
              only: master
